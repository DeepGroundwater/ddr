[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/ddr/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/ddr", "engine", "tests"]

[tool.hatch.metadata]
allow-direct-references = true

[project]
name = "ddr"
description = "Distributed Differentiable Routing for the NextGen Hydrofabric"
readme = "README.md"
dynamic = ["version"]
requires-python = ">=3.11.0"
license = {file = "LICENSE"}
authors = [
    {name = "Tadd Bindas"},
]
maintainers = [
    {name = "Tadd Bindas", email = "taddbindas@gmail.com"},
]

dependencies = [
    "colormaps==0.4.2",
    "contextily==1.6.2",
    "geopandas==1.1.1",
    "hatch==1.14.1",
    "hydra-core==1.3.2",
    "icechunk==1.0.3",
    "matplotlib==3.10.3",
    "numpy==2.2.6",
    "pandas==2.3.1",
    "pre-commit==4.2.0",
    "pydantic==2.11.7",
    "pykan==0.2.8",
    "scikit-learn==1.7.0",
    "scipy==1.16.0",
    "tqdm==4.67.1",
    "xarray==2025.7.1",
    "zarr==3.0.9",
]

[project.optional-dependencies]
docs = [
  "mkdocs-material==9.6.15",
  "sympy==1.14.0"
]
cuda = [
  "torch==2.7.1",
  "cupy-cuda12x==13.4.1",
]

[dependency-groups]
tests = [
    "pytest==8.4.1",
    "pytest-cov==6.1.1",
    "ruff==0.12.2",
    "nbstripout==0.8.1",
    "boto3==1.39.14",

]
engine = [
  "adbc-driver-sqlite==1.6.0",
  "polars==1.31.0",
  "pyarrow==20.0.0",
  "rustworkx==0.16.0",
]
jupyter = [
  "ipykernel==6.30.0",
  "jupyterlab==4.4.4",
]
cpu = [
  "torch==2.7.1",
]

[tool.uv]
default-groups = ["engine", "tests", "cpu", "jupyter"]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[tool.black]
line-length = 110
skip-string-normalization = true
preview = true
target-version = ['py311']

[tool.ruff]
line-length = 110
extend-include = ["*.ipynb"]
lint.select = [
  "F",      # Errors detected by Pyflakes
  "E",      # Error detected by Pycodestyle
  "W",      # Warning detected by Pycodestyle
  "I",      # isort
  "D",      # pydocstyle
  "B",      # flake8-bugbear
  "Q",      # flake8-quotes
  "TID",    # flake8-tidy-imports
  "C4",     # flake8-comprehensions
  "BLE",    # flake8-blind-except
  "UP",     # pyupgrade
  "RUF100", # Report unused noqa directives
]
lint.ignore = [
  # line too long -> we accept long comment lines; black gets rid of long code lines
  "E501",
  # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E731",
  # allow I, O, l as variable names -> I is the identity matrix
  "E741",
  # Missing docstring in public package
  "D104",
  # Missing docstring in public module
  "D100",
  # Missing docstring in __init__
  "D107",
  # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "B008",
  # __magic__ methods are are often self-explanatory, allow missing docstrings
  "D105",
  # first line should end with a period [Bug: doesn't work with single-line docstrings]
  "D400",
  # First line should be in imperative mood; try rephrasing
  "D401",
  ## Disable one in each pair of mutually incompatible rules
  # We don't want a blank line before a class docstring
  "D203",
  "D205",  # 1 blank line required between summary line and description
  # We want docstrings to start immediately after the opening triple quote
  "D213",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I"]
"hooks/*" = ["I", "D"]  # Ignore import sorting and all docstring errors in hooks/
"mkdocs.yaml" = ["I"]
"mkdocs.yml" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]
"*.ipynb" = ["E402", "E501", "F401", "F811", "F841", "T201"]  # Common notebook exceptions

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
strict_optional = true
ignore_missing_imports = true
disallow_any_unimported = true
check_untyped_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_unused_ignores = true

[tool.pytest.ini_options]
filterwarnings =  [
    # Ignore a torch UserWarning about doing std()
    # On a single element...
    "ignore::UserWarning:.*test_utils.*:"
]
